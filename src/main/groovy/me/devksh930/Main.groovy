import net.grinder.script.GTest
import net.grinder.scriptengine.groovy.junit.GrinderRunner
import net.grinder.scriptengine.groovy.junit.annotation.BeforeProcess
import net.grinder.scriptengine.groovy.junit.annotation.BeforeThread
import org.junit.Before
import org.junit.Test
import org.junit.runner.RunWith
import org.ngrinder.http.HTTPRequest
import org.ngrinder.http.HTTPRequestControl
import org.ngrinder.http.HTTPResponse
import org.ngrinder.http.cookie.Cookie
import org.ngrinder.http.cookie.CookieManager

import static net.grinder.script.Grinder.grinder
import static org.hamcrest.Matchers.is
import static org.junit.Assert.assertThat

// import static net.grinder.util.GrinderUtils.* // You can use this if you're using nGrinder after 3.2.3

/**
 * A simple example using the HTTP plugin that shows the retrieval of a single page via HTTP.
 *
 * This script is automatically generated by ngrinder.
 *
 * @author admin
 */
@RunWith(GrinderRunner)
class TestRunner {

    public static GTest test1
    public static GTest test2
    public static GTest test3
    public static GTest test4
    public static HTTPRequest request
    public static Map<String, String> headers = [:]
    public static Map<String, Object> params = [:]
    public static Map<String, Object> orderParams = [:]
    public static Map<String, Object> paymentParams = [:]
    public static List<Cookie> cookies = []
    private static String baseUrl = ""
    private static String token = ""
    private String location = ""

    @BeforeProcess
    public static void beforeProcess() {
        HTTPRequestControl.setConnectionTimeout(300000)

        test1 = new GTest(1, "GET /time-deals?page=1")
        test2 = new GTest(2, "GET /time-deals/1")
        test3 = new GTest(3, "POST /orders/time-deals/1")
        test4 = new GTest(4, "POST /orders/{orderId}/payment")

        request = new HTTPRequest()

        grinder.logger.info("before process.")
    }

    @BeforeThread
    public void beforeThread() {
        test1.record(this, "test1")
        test2.record(this, "test2")
        test3.record(this, "test3")
        test4.record(this, "test4")

        grinder.statistics.delayReports = true
        grinder.logger.info("before thread.")
    }

    @Before
    public void before() {
        headers.put("Authorization", "Bearer " + token)
        headers.put("Content-Type", "application/json")
        request.setHeaders(headers)

        orderParams.put("stockId", 1)
        orderParams.put("quantity", 2)
        orderParams.put("address", "서울시 관악구")

        paymentParams.put("amount",5200000.00)
        CookieManager.addCookies(cookies)
        grinder.logger.info("before. init headers and cookies")
    }

    @Test
    public void test1() {
        final HTTPResponse response = request.GET(baseUrl + "/time-deals?page=1", params, headers)

        if (response.statusCode == 301 || response.statusCode == 302) {
            grinder.logger.warn("Warning. The response may not be correct. The response code was {}.", response.statusCode)
        } else {
            assertThat(response.statusCode, is(200))
        }

    }

    @Test
    public void test2() {
        final HTTPResponse response = request.GET(baseUrl + "/time-deals/1", params, headers)

        if (response.statusCode == 301 || response.statusCode == 302) {
            grinder.logger.warn("Warning. The response may not be correct. The response code was {}.", response.statusCode)
        } else {
            assertThat(response.statusCode, is(200))
        }
    }

    @Test
    public void test3() {
        final HTTPResponse response = request.POST(baseUrl + "/orders/time-deals/1", orderParams, headers)
        if (response.statusCode == 301 || response.statusCode == 302) {
            grinder.logger.warn("Warning. The response may not be correct. The response code was {}.", response.statusCode)
        } else {
            assertThat(response.statusCode, is(201))
        }
        location = response.getHeader("Location").getValue()
        grinder.logger.info("Location {}", location)

    }

    @Test
    public void test4() {
        final HTTPResponse response = request.POST(baseUrl + location+"/payment", paymentParams, headers)
        if (response.statusCode == 301 || response.statusCode == 302) {
            grinder.logger.warn("Warning. The response may not be correct. The response code was {}.", response.statusCode)
        } else {
            assertThat(response.statusCode, is(200))
        }
        location = response.getHeader("Location")
        grinder.logger.info("Location {}", location)

    }
}

